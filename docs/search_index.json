[["index.html", "Who puts their city on the map? Mapping which cities and district have produced the most number 1 records in Germany Chapter 1 Introduction 1.1 Data 1.2 Aim 1.3 Contact Information", " Who puts their city on the map? Mapping which cities and district have produced the most number 1 records in Germany Daniel Kuhlen 2023-02-11 Chapter 1 Introduction German rap music has made a significant impact on the music industry, transitioning from a subculture to a dominant presence in mainstream pop culture. In recent years, rappers have become more and more often superstars, regularly achieving top positions on the music charts. This project will delve into the geographic competition between German rappers, by examining their origins. Many German rappers have a strong connection to their hometown or region, which often plays a defining role in shaping their music and identity. This connection is reflected in the lyrics of their songs, where they pay homage to the cultural and social influences of their place of origin. In German rap music, the artist’s origin often becomes an integral part of their image and can play a major role in their popularity and success. Our aim is to analyze which state and district (known as Landkreis in German) in Germany produces the most number one albums and singles. To give a data driven response to the question which city and area is the most influential. 1.1 Data The data for this project was sourced from the Wikipedia lists of German Rap Albums and German Rap Singles that reached number one on the German charts. These lists can be found at German Rap Albums and German Rap Singles. 1.2 Aim The aim of this project is to create interactive maps and a clean, well-organized dataset that is available for public use. The maps will visually display the information gathered from the data, allowing for an engaging and easy-to-understand representation of the results. The tidyformat dataset will be structured in a clear and concise manner, making it accessible and straightforward for those who wish to use it for their own research or analysis. 1.3 Contact Information If you have any question I am happy to help you out. Daniel Kuhlen: daniel.kuhlen@gmx.de "],["data-1.html", "Chapter 2 Data 2.1 Data Import 2.2 Data Wrangling 2.3 Data Export Excel", " Chapter 2 Data 2.1 Data Import # packages library(tidyverse) library(rvest) library(rnaturalearth) library(sf) library(tm) # Deutschrapper:innen ---------------------------------------------------------- ## Einem Objekt (url) die URL der Seite zuweisen aus der die Daten gescraped werden sollen url = &quot;https://de.wikipedia.org/wiki/Liste_von_Hip-Hop-Musikern_Deutschlands&quot; ## Einem objekt die html zuweisen die aus der url gelesen wird. rapperhtml &lt;- read_html(url) ## Im Quellcode der Website nach dem Objekt oder der ID suchen das gescraped werden soll und über html_nodes Objekte anzeigen lassen. rapperhtml %&gt;% html_nodes(css = &quot;table&quot;) ## Output von html_nodes auslesen und gewünschte Tabelle in dem Code unter nth() spezifizieren. rapper = rapperhtml %&gt;% html_nodes(css = &quot;table&quot;) %&gt;% nth(1) %&gt;% html_table(fill = TRUE) ## Objekt als Datenframe - fertig! rapper &lt;- as.data.frame(rapper) ## unnötige Dateien entfernen rm(rapperhtml, url) # Rapalben mit Platz 1 Chartplatzierung ---------------------------------------- ## Einem Objekt (url) die URL der Seite zuweisen aus der die Daten gescraped werden sollen url = &quot;https://de.wikipedia.org/wiki/Liste_der_Rapalben,_die_Platz_eins_der_deutschen_Charts_erreichten&quot; ## Einem objekt die html zuweisen die aus der url gelesen wird. albenhtml = read_html(url) ## Im Quellcode der Website nach dem Objekt oder der ID suchen das gescraped werden soll und über html_nodes Objekte anzeigen lassen. albenhtml %&gt;% html_nodes(css = &quot;table&quot;) ## Output von html_nodes auslesen und gewünschte Tabelle in dem Code unter nth() spezifizieren. alben = albenhtml %&gt;% html_nodes(css = &quot;table&quot;) %&gt;% nth(1) %&gt;% html_table(fill = TRUE) ## Objekt als Datenframe - fertig! alben &lt;- as.data.frame(alben) ## unnötige Dateien entfernen rm(albenhtml, url) # Rapsingles mit Platz 1 Chartplatzierung ---------------------------------------- ## Einem Objekt (url) die URL der Seite zuweisen aus der die Daten gescraped werden sollen url = &quot;https://de.wikipedia.org/wiki/Liste_der_Rapsongs,_die_Platz_eins_der_deutschen_Charts_erreichten&quot; ## Einem objekt die html zuweisen die aus der url gelesen wird. singleshtml = read_html(url) ## Im Quellcode der Website nach dem Objekt oder der ID suchen das gescraped werden soll und über html_nodes Objekte anzeigen lassen. singleshtml %&gt;% html_nodes(css = &quot;table&quot;) ## Output von html_nodes auslesen und gewünschte Tabelle in dem Code unter nth() spezifizieren. singles = singleshtml %&gt;% html_nodes(css = &quot;table&quot;) %&gt;% nth(1) %&gt;% html_table(fill = TRUE) ## Objekt als Datenframe - fertig! singles &lt;- as.data.frame(singles) ## unnötige Dateien entfernen rm(singleshtml, url) # Shapefiles // GIS-Files ------------------------------------------------------ de_1 &lt;- ne_states(country = &quot;germany&quot;, returnclass = &quot;sf&quot;) de_2 &lt;- read_sf(&quot;shapefiles/gadm41_DEU_2.shp&quot;) 2.2 Data Wrangling ####################### Datensätze Rohformat ################################### # Rapper:innen Datensatz ------------------------------------------------------- ## Unnötige Columns entfernen rapper[1] &lt;- NULL rapper[2] &lt;- NULL ## rename rapper &lt;- rapper %&gt;% rename(city.origin = Herkunft, birthyear = Lebensdaten, membership.group = `Mitgliedschaft in Bands`, artist.name = &quot;Künstlername&quot;) # Singles Datensatz ------------------------------------------------------------ ## unnötige columns entfernen singles$`Wochen in den Charts` &lt;- NULL singles$Jahr &lt;- NULL ## rename columns singles.prc &lt;- singles %&gt;% rename(project.name = &quot;Titel&quot;, artist.name = &quot;Künstler&quot;, weeks.nr1 = &quot;Wochen auf Platz 1&quot;, award = &quot;Auszeichnung&quot;) ## alle nicht deutschen alben löschen singles.prc &lt;- singles.prc[!grepl(&quot;Vereinigte Staaten&quot;, singles.prc$artist.name),] singles.prc &lt;- singles.prc[!grepl(&quot;Kanada&quot;, singles.prc$artist.name),] singles.prc &lt;- singles.prc[!grepl(&quot;Schweden&quot;, singles.prc$artist.name),] singles.prc &lt;- singles.prc[!grepl(&quot;Australien&quot;, singles.prc$artist.name),] singles.prc &lt;- singles.prc[!grepl(&quot;Danemark&quot;, singles.prc$artist.name),] singles.prc &lt;- singles.prc[!grepl(&quot;Finnland&quot;, singles.prc$artist.name),] singles.prc &lt;- singles.prc[!grepl(&quot;Kolumbien&quot;, singles.prc$artist.name),] singles.prc &lt;- singles.prc[!grepl(&quot;Niederlande&quot;, singles.prc$artist.name),] singles.prc &lt;- singles.prc[!grepl(&quot;Somalia&quot;, singles.prc$artist.name),] singles.prc &lt;- singles.prc[!grepl(&quot;Vereinigtes Konigreich&quot;, singles.prc$artist.name),] ## unnötige wörter entfernen list.words &lt;- c(&quot;Deutschland&quot;, &quot;und&quot;, &quot;Kosovo&quot;, &quot;feat.&quot;) singles.prc &lt;- singles.prc %&gt;% mutate(artist.name = removeWords(artist.name, list.words), artist.name = trimws(artist.name, which = c(&quot;both&quot;, &quot;left&quot;, &quot;right&quot;), whitespace = &quot;[ \\t\\r\\n]&quot;)) # Alben Datensatz -------------------------------------------------------------- ## unnötige columns entfernen alben$`Wochen in den Charts` &lt;- NULL alben$Art &lt;- NULL ## rename columns alben.prc &lt;- alben %&gt;% rename(project.name = Titel, year = Jahr, artist.name = &quot;Künstler&quot;, weeks.nr1 = `Wochen auf Platz 1`, award = Auszeichnung) ## alle nicht deutschen alben löschen alben.prc &lt;- alben.prc[!grepl(&quot;Vereinigte Staaten&quot;, alben.prc$artist.name),] ## unnötige wörter entfernen list.words &lt;- c(&quot;Deutschland&quot;, &quot;und&quot;) alben.prc &lt;- alben.prc %&gt;% mutate(artist.name = removeWords(artist.name, list.words), artist.name = trimws(artist.name, which = c(&quot;both&quot;, &quot;left&quot;, &quot;right&quot;), whitespace = &quot;[ \\t\\r\\n]&quot;)) 2.3 Data Export Excel ############################ datensatz excel ################################### ## Datensatz erstellen mit allen Rapper:innen die eine Single oder Album auf der ## 1 hatten, damit dieser dann händisch in excel fertig kodiert werden kann alben.prc &lt;- alben.prc %&gt;% select(artist.name, project.name, weeks.nr1, award) %&gt;% mutate(type = &quot;album&quot;) singles.prc &lt;- singles.prc %&gt;% select(artist.name, project.name, weeks.nr1, award) %&gt;% mutate(type = &quot;single&quot;) rapper.singles.alben &lt;- rbind(alben.prc, singles.prc) # leftjoin mit rapper datensatz wikipedia rapper.list.complete &lt;- left_join(rapper.singles.alben, rapper, by=(&quot;artist.name&quot;)) rapper.list.complete &lt;- rapper.list.complete %&gt;% unite(&quot;id&quot;, artist.name, project.name, type, sep = &quot;-&quot;, remove = FALSE) ## export excel -&gt; dann händisch kodieren #write_xlsx(rapper.list.complete, &quot;/Users/danielkuhlen/Desktop/rapper.list.complete.xlsx&quot;) The result of the data wrangling in R is a dataset where each row represents a single or album that charted at number 1. For some rappers, their origins have already been joined to the rapper dataset. However, the problem is that groups and features cannot have their origins joined to the rapper dataset because only solo performers are listed there. Therefore, the origins for these cases are manually coded. This is done by following this schema: groups with members who have different origins are divided based on their members and coded individually. To avoid double counting a project, the number of weeks in the charts is divided by the number of collaborators. For example, Bausa and Apache207 share the weeks at number 1 of their song “Madonna.” The song was in the charts for one week, so both (and their origins) will go into the final dataset with 0.5 weeks. For groups that all have the same origin, like 187 Straßenbande (Hamburg), the group will be treated as a solo artist and one origin will be assigned to the group. The origin of rappers who are not listed in the rapper dataset will be researched and added manually. ########################## finale datensatze ################################### dataset.complete &lt;- read_excel(&quot;/Users/danielkuhlen/Desktop/UNI/Semester/6. SoSe 2022/Introduction GIS-Software/Assignments/rap.map/rapper.list.complete 2.mod.xlsx&quot;) # album ------------------------------------------------------------------------ album.complete &lt;- dataset.complete %&gt;% subset(type == &quot;album&quot;) ## album: wochen auf 1 nach landkreis album.kreis.weeks &lt;- album.complete %&gt;% group_by(kreis.origin) %&gt;% summarise_at(vars(weeks.nr1.adj), list(weeks.nr1.adj = sum)) ## album: wochen auf 1 nach bundesland album.states.weeks &lt;- album.complete %&gt;% group_by(state.origin) %&gt;% summarise_at(vars(weeks.nr1.adj), list(weeks.nr1.adj = sum)) # single ----------------------------------------------------------------------- single.complete &lt;- dataset.complete %&gt;% subset(type == &quot;single&quot;) ## album: wochen auf 1 nach landkreis single.kreis.weeks &lt;- single.complete %&gt;% group_by(kreis.origin) %&gt;% summarise_at(vars(weeks.nr1.adj), list(weeks.nr1.adj = sum)) ## album: wochen auf 1 nach bundesland single.state.weeks &lt;- single.complete %&gt;% group_by(state.origin) %&gt;% summarise_at(vars(weeks.nr1.adj), list(weeks.nr1.adj = sum)) #################### Finale Datensätze mit Geodaten ############################ # album kreise ----------------------------------------------------------------- ## merge shapefiles mit album.kreis.weeks album.kreise.geo &lt;- left_join(de_2, album.kreis.weeks, by=c(&quot;NAME_2&quot; = &quot;kreis.origin&quot;)) # auf 2 nachkommastelle runden album.kreise.geo &lt;- album.kreise.geo %&gt;% mutate(weeks.nr1.adj = round(weeks.nr1.adj, 2)) # Neue Variable Wochenzahl mit NA = 0 album.kreise.geo &lt;- album.kreise.geo %&gt;% mutate(weeks.nona = weeks.nr1.adj) album.kreise.geo$weeks.nona[is.na(album.kreise.geo$weeks.nona)] &lt;- 0 # GID_2 als Name Landkreis + Wochenanzahl damit auf interaktive Karte angezeigt wird album.kreise.geo$GID_2 &lt;- paste(album.kreise.geo$NAME_2, &quot;:&quot;, album.kreise.geo$weeks.nona) # album bundeslaender ---------------------------------------------------------- ## merge shapefiles mit album.kreis.weeks album.states.geo &lt;- left_join(de_1, album.states.weeks, by=c(&quot;name&quot; = &quot;state.origin&quot;)) # auf 2 nachkommastelle runden album.states.geo &lt;- album.states.geo %&gt;% mutate(weeks.nr1.adj = round(weeks.nr1.adj, 2)) # Neue Variable Wochenzahl mit NA = 0 album.states.geo &lt;- album.states.geo %&gt;% mutate(weeks.nona = weeks.nr1.adj) album.states.geo$weeks.nona[is.na(album.states.geo$weeks.nona)] &lt;- 0 # GID_2 als Name Landkreis + Wochenanzahl damit auf interaktive Karte angezeigt wird album.states.geo$featurecla &lt;- paste(album.states.geo$name, &quot;:&quot;, album.states.geo$weeks.nona) # singles kreise --------------------------------------------------------------- ## merge shapefiles mit album.kreis.weeks singles.kreise.geo &lt;- left_join(de_2, single.kreis.weeks, by=c(&quot;NAME_2&quot; = &quot;kreis.origin&quot;)) # auf 2 nachkommastelle runden singles.kreise.geo &lt;- singles.kreise.geo %&gt;% mutate(weeks.nr1.adj = round(weeks.nr1.adj, 2)) # Neue Variable Wochenzahl mit NA = 0 singles.kreise.geo &lt;- singles.kreise.geo %&gt;% mutate(weeks.nona = weeks.nr1.adj) singles.kreise.geo$weeks.nona[is.na(singles.kreise.geo$weeks.nona)] &lt;- 0 # GID_2 als Name Landkreis + Wochenanzahl damit auf interaktive Karte angezeigt wird singles.kreise.geo$GID_2 &lt;- paste(singles.kreise.geo$NAME_2, &quot;:&quot;, singles.kreise.geo$weeks.nona) # singles bundeslaender -------------------------------------------------------- ## merge shapefiles mit album.kreis.weeks singles.states.geo &lt;- left_join(de_1, single.state.weeks, by=c(&quot;name&quot; = &quot;state.origin&quot;)) # auf 2 nachkommastelle runden singles.states.geo &lt;- singles.states.geo %&gt;% mutate(weeks.nr1.adj = round(weeks.nr1.adj, 2)) # Neue Variable Wochenzahl mit NA = 0 singles.states.geo &lt;- singles.states.geo %&gt;% mutate(weeks.nona = weeks.nr1.adj) singles.states.geo$weeks.nona[is.na(singles.states.geo$weeks.nona)] &lt;- 0 # GID_2 als Name Landkreis + Wochenanzahl damit auf interaktive Karte angezeigt wird singles.states.geo$featurecla &lt;- paste(singles.states.geo$name, &quot;:&quot;, singles.states.geo$weeks.nona) ######################### Löschen Prozessdateien ############################### rm(alben, alben.prc, album.kreis.weeks, album.states.weeks, single.complete, single.kreis.weeks, single.state.weeks, singles, singles.prc, rapper, rapper.list.complete, rapper.singles.alben, list.words) "],["albums.html", "Chapter 3 Albums 3.1 Weeks on Nr.1 by state 3.2 Weeks on number one by districts", " Chapter 3 Albums library(tmap) 3.1 Weeks on Nr.1 by state tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(album.states.geo)+ tm_polygons(col = &quot;weeks.nr1.adj&quot;, style = &quot;jenks&quot;, labels = c(&quot;1.00 - 1.50&quot;, &quot;1.51 - 10.00&quot;, &quot;10.01 - 25.50&quot;, &quot;25.51 - 45.85&quot;, &quot;45.86 - 56.00&quot;), title = &quot;Wochen an der Chartspitze&quot;, lwd = 0.2, palette = &quot;-viridis&quot;, textNA = &quot;Kein Nr 1 Album&quot;)+ tm_view(view.legend.position = c(&quot;right&quot;, &quot;bottom&quot;)) 3.2 Weeks on number one by districts tm_shape(album.kreise.geo)+ tm_polygons(col = &quot;weeks.nr1.adj&quot;, style = &quot;jenks&quot;, labels = c(&quot;0.20 - 2.00&quot;, &quot;2.01 - 5.20&quot;, &quot;5.21 - 12.53&quot;, &quot;12.54 - 21.00&quot;, &quot;21.01 - 56.00&quot;), title = &quot;Wochen an der Chartspitze&quot;, lwd = 0.2, palette = &quot;-viridis&quot;, textNA = &quot;Kein Nr 1 Album&quot;)+ tm_view(view.legend.position = c(&quot;right&quot;, &quot;bottom&quot;)) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
